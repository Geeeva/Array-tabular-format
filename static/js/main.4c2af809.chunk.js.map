{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["process","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","a","App","createElement","k","length","console","log","Number","isInteger","i","temparray","subsetArray","chunk","slice","push","outputString","temporaryContent","largestNumberOfDigits","Math","max","apply","toString","repeatingCharactersUpperBorder","repeat","wholeRowUpperBorder","concat","repeatingCharactersBottomBorder","wholeRowBottomBorder","j","stdout","write","solution","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAA,SAAAA,GAAA,IAAAC,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAEMI,EAAI,CAAC,EAAG,GAAI,GAAI,IAAK,MAAO,GAAI,EAAG,EAAG,GAAI,GA+EjCC,IARH,WACR,OACIH,EAAAE,EAAAE,cAAA,WAvES,SAACF,EAAGG,GAGjB,GAAgB,IAAbH,EAAEI,QAAgBJ,EAAEI,OAAS,IAC5BC,QAAQC,IAAI,wDAKhB,GAAIH,EAAI,GAAKA,EAAI,MAAaI,OAAOC,UAAUL,IAAMA,EAAIH,EAAEI,OACvDC,QAAQC,IAAI,oLADhB,CAMA,IAAI,IAAIG,EAAI,EAAGA,EAAIT,EAAEI,OAAQK,IACzB,GAAGT,EAAES,GAAK,GAAKT,EAAES,GAAK,MAAaF,OAAOC,UAAUR,EAAES,IAElD,YADAJ,QAAQC,IAAI,wHAWpB,IALA,IACII,EADAC,EAAc,GAGZC,EAAQT,EAELM,EAAI,EAAIA,EAAIT,EAAEI,OAAQK,GAAKG,EAChCF,EAAYV,EAAEa,MAAMJ,EAAGA,EAAIG,GAC3BD,EAAYG,KAAKJ,GAuBrB,IAnBA,IAAIK,EAAe,GACfC,EAAmB,GAKjBC,EADgBC,KAAKC,IAAIC,MAAM,KAAMpB,GACCqB,WAAWjB,OAGjDkB,EAAiC,IAAIC,OAAON,GAE5CO,EADqB,IAAAC,OAAOH,GACgBC,OAAOpB,GAGnDuB,EAAkC,IAAIH,OAAON,GAE7CU,EADsB,IAAAF,OAAOC,GACiBH,OAAOZ,EAAYA,EAAYP,OAAS,GAAGA,QAGvFK,EAAI,EAAGA,EAAIE,EAAYP,OAAQK,IAAI,CACvCO,EAAiBP,GAAK,GACtB,IAAI,IAAImB,EAAI,EAAGA,EAAIjB,EAAYF,GAAGL,OAAQwB,IACtCZ,EAAiBP,IAAM,IAAM,OAASc,OAAON,EAAwBN,EAAYF,GAAGmB,GAAGP,WAAWjB,QAAUO,EAAYF,GAAGmB,GAE/Hb,GAAY,GAAAU,OAAOD,EAAP,OACZT,GAAY,GAAAU,OAAOT,EAAiBP,GAAxB,OAGhBM,GAAY,GAAAU,OAAOE,EAAP,KAGZhC,EAAQkC,OAAOC,MAAMf,IAOZgB,CAAS/B,EA1EkC,yKCUpCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAvC,EAAAE,cAACD,EAAA,EAAD,MAASuC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4c2af809.chunk.js","sourcesContent":["import React from 'react';\n\nconst a = [4, 35, 80, 123, 12345, 44, 8, 5, 24, 3], k = 4;\n\nconst solution = (a, k) => {\n    //Setting bounderies\n    //N is an integer within the range [1..200] - length of array and if no exiting the function\n    if(a.length === 0 || a.length > 200) {\n        console.log(\"Array has no elements or more than 200 elements\");\n        return;\n    }\n\n    //k is not an integer within the range [1..1,000,000,000] - break, or k is not an integer, or k is greater than the length of array exiting the function\n    if( k < 1 || k > 10000000 || !Number.isInteger(k) || k > a.length) {\n        console.log(\"Break - k is smaller than 1 or has value greater than 1000000, or k is not an integer, or k is greater than the length of array, therefore array cannot be divided into rows\");\n        return;\n    } \n\n    //Element of array a is an integer within the range [0..1,000,000,000], if no exiting the function\n    for(let i = 0; i < a.length; i++){\n        if(a[i] < 0 || a[i] > 1000000  || !Number.isInteger(a[i])){\n            console.log(\"There are other types of elements other than integer within array, or are smaller than 1 or are greater than 1000000\");\n            return;\n        }\n    }\n\n    //Creating subsetArray\n    let subsetArray = [];\n    let temparray;\n\n    const chunk = k;\n    //Looping through a array and injecting chunks-temparray into subsetArray\n    for (let i = 0;  i < a.length; i += chunk) {\n        temparray = a.slice(i, i + chunk);\n        subsetArray.push(temparray);\n    }\n    \n    //Initializing outputString for the final output and temporaryContent\n    let outputString = \"\";\n    let temporaryContent = [];\n\n            \n    //Checking the number with greatest number of digits within array\n    const largestNumber = Math.max.apply(null, a);\n    const largestNumberOfDigits = largestNumber.toString().length;\n\n    //Defining upper border of the table preview\n    const repeatingCharactersUpperBorder = \"-\".repeat(largestNumberOfDigits);\n    const rowSegmentUpperBorder = `+${repeatingCharactersUpperBorder}`;\n    const wholeRowUpperBorder = rowSegmentUpperBorder.repeat(k);\n    \n    //Defining bottom border of the table preview\n    const repeatingCharactersBottomBorder = \"-\".repeat(largestNumberOfDigits);\n    const rowSegmentBottomBorder = `+${repeatingCharactersBottomBorder}`;\n    const wholeRowBottomBorder = rowSegmentBottomBorder.repeat(subsetArray[subsetArray.length - 1].length);\n    \n    //Defining the content of the table and putting it into temporaryContent\n    for(let i = 0; i < subsetArray.length; i++){\n        temporaryContent[i] = \"\";\n        for(let j = 0; j < subsetArray[i].length; j++){ \n            temporaryContent[i] += \"|\" + \"\\u00A0\".repeat(largestNumberOfDigits - subsetArray[i][j].toString().length) + subsetArray[i][j];\n        }\n        outputString += `${wholeRowUpperBorder}+\\n`;\n        outputString += `${temporaryContent[i]}|\\n`;\n    }\n    \n    outputString += `${wholeRowBottomBorder}+`;\n    //Outputing the content of the string with process.stdout.write() or console.log()\n    \n    process.stdout.write(outputString);\n    //console.log(outputString);\n}\n\nconst App = () => {\n    return (\n        <div>\n            {solution(a, k)}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}